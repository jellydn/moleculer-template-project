version: "3.2"

services:

  api:
    build:
      context: .
    image: {{projectName}}
    container_name: {{projectName}}-api
    env_file: docker-compose.env
    environment:
      SERVICES: api
      PORT: 3000
{{#hasDepends}}
    depends_on:
{{/hasDepends}}
{{#if_eq transporter "NATS"}}
      - nats
{{/if_eq}}
{{#redis}}
      - redis
{{/redis}}
{{#if_eq transporter "MQTT"}}
      - mqtt
{{/if_eq}}
{{#if_eq transporter "AMQP"}}
      - amqp
{{/if_eq}}
{{#if_eq transporter "STAN"}}
      - stan
{{/if_eq}}
{{#if_eq transporter "Kafka"}}
      - zookeeper
{{/if_eq}}
    labels:
      - traefik.enable=true
      - traefik.http.routers.web-api.rule=Host(`localhost`)
      - traefik.http.routers.web-api.entrypoints=web
    networks:
      - internal

  greeter:
    build:
      context: .
    image: {{projectName}}
    container_name: {{projectName}}-greeter
    env_file: docker-compose.env
    environment:
      SERVICES: greeter
    labels:
      - "traefik.enable=false"
{{#hasDepends}}
    depends_on:
{{/hasDepends}}
{{#if_eq transporter "NATS"}}
      - nats
{{/if_eq}}
{{#redis}}
      - redis
{{/redis}}
{{#if_eq transporter "MQTT"}}
      - mqtt
{{/if_eq}}
{{#if_eq transporter "AMQP"}}
      - amqp
{{/if_eq}}
{{#if_eq transporter "STAN"}}
      - stan
{{/if_eq}}
{{#if_eq transporter "Kafka"}}
      - zookeeper
{{/if_eq}}
    networks:
      - internal
{{#if_eq transporter "NATS"}}

  nats:
    image: nats
    labels:
      - "traefik.enable=false"
    networks:
      - internal
{{/if_eq}}
{{#redis}}

  redis:
    image: redis:alpine
    labels:
      - "traefik.enable=false"
    networks:
      - internal
{{/redis}}
{{#if_eq transporter "MQTT"}}

  mqtt:
    image: ncarlier/mqtt
    labels:
      - "traefik.enable=false"
    networks:
      - internal
{{/if_eq}}
{{#if_eq transporter "AMQP"}}

  amqp:
    image: rabbitmq:3
    labels:
      - "traefik.enable=false"
    networks:
      - internal
{{/if_eq}}
{{#if_eq transporter "STAN"}}

  stan:
    image: nats-streaming
    labels:
      - "traefik.enable=false"
    networks:
      - internal
{{/if_eq}}
{{#if_eq transporter "Kafka"}}

  zookeeper:
    image: bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    labels:
      - "traefik.enable=false"
    networks:
      - internal

  kafka:
    image: bitnami/kafka
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    labels:
      - "traefik.enable=false"
    depends_on:
      - zookeeper
    networks:
      - internal
{{/if_eq}}

  traefik:
    image: traefik:v2.0
    container_name: traefik
    command:
      # - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - traefik.http.routers.web.rule=Host(`localhost`)
      - traefik.http.routers.web.entrypoints=web
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=8080"
    ports:
      - 3000:80
      - 3001:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - internal
      - default

networks:
  internal:
